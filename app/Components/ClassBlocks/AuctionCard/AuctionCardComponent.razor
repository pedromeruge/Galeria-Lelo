@using Classes.AuctionCard;
@using Classes.Bids;
@using Classes.Time;
@using System;
@inherits ComponentBase
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<div class="card-component" @onclick=" () => NavigateToDetalhesLeilao(Card.IdLeilao)">
  @if (Card.Images.Any()) {
    <img src="@Card.Images.First().Path" class="card-img-top" alt="@Card.Images.First().Path">
  }
  else {
    <p class="card-img-top">Image not found</p>
  }
  <div class="info-names">
    <span>
      <span class="author">
        @Card.Nome_artista -
      </span>
      <span class="name">
        @Card.Prod_nome
      </span>
    </span>
  </div>
  <div class="info-bids">
    <div class="left-bid-text"> Licitação atual:</div>
    <div class="right-bid-text"> 
      <div class="preco-atual">@currentBid.ToString("F2") €</div>
      <div class="preco-com-envio"> @finalCost.ToString("F2") € incl.</div>
    </div>
  </div>
  <div id="remainingTime_@Card.IdLeilao" class="time">
    @if (Card.DataFim > DateTime.Now) { //inicialmente meter valores, javascript vai alterá-los apos o minute passar
      <text>@Time.RemainingTimeToString(Card.DataFim)</text>
      }
    else{
      <text>ENCERRADO</text>
    }
  </div>
</div>

<script src="JSscripts/timeUpdater.js"></script>

@code {
  [Parameter, EditorRequired]
  public AuctionCard Card { get; set; } = default!;
  private decimal finalCost;
  private decimal currentBid;

  protected override async Task OnInitializedAsync() {
    string elementId = "remainingTime_" + Card.IdLeilao;
    int updateFrequency = 1000;
    // Card.DataFim.Hour < 1 ? 1000 : 60000; // se tempo restante for menor de 1 hora atualizar a cada seg, senao a cada min
    JSRuntime.InvokeVoidAsync("startCountdown", elementId, Card.DataFim.ToString("yyyy-MM-ddTHH:mm:ss"), updateFrequency);
  }

  protected override void OnInitialized()
  {
      if (Card.Maior_licitacao == null) {
        currentBid = Card.Preco_base;
      }
      else {
        currentBid = Card.Maior_licitacao.Valor;
      }

      // Pegar na maior licitação atual, tem de se mudar ainda
      finalCost = currentBid + Card.Custo_envio;
  }

  private void NavigateToDetalhesLeilao(int auctionId) {
      @* Console.WriteLine("Calling NavigateToDeatlhesLeilao"); *@
    if (Card.Leilao_estado == AuctionStatus.em_leilao) {
        NavigationManager.NavigateTo($"/AuctionDetails/{Card.IdLeilao}");
    } else {
      NavigationManager.NavigateTo($"/AuctionDetailsFinished/{Card.IdLeilao}");
    }
  }
}