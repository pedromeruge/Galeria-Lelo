@page "/admin/AuctionStates/Concluido"
@layout LoginAdminLayout

@inject NavigationManager NavigationManager
@inject IWebHostEnvironment WebHostEnvironment
@inject IJSRuntime JSRuntime
@using app.Components.ClassBlocks.AuctionCard.Admin
@rendermode InteractiveServer
@using DataLayer.Auction
@inject Microsoft.AspNetCore.Components.NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@using Classes.AuctionCard
@inject IAuctionRepository AuctionService
@inject IAdminService AdminService

@using Classes.Admin

<PageTitle>Galeria Lelo</PageTitle>

@if (cards == null) {
    <p>Loading page...</p>
}
else {
    <div class="leiloes">
        @if(cards.Count > 0) {
            <p class="texto-leiloes">Leilões encontrados</p>
            <div class="grid">
                @foreach (var card in cards) {
                    <AuctionCardHorizFinishedAdminComponent Card="card" />
                }
            </div>
        } else {
            <p class="texto-leiloes">Sem leilões concluídos </p>
        }
    </div>
}

@code {
    public List<AuctionCard>? cards;

	protected override async Task OnAfterRenderAsync(bool firstRender) {
		if (firstRender) {
			// ver se user existe e ta valido
			Admin admin = await localStorage.GetItemAsync<Admin>("Admin");
			if (admin == null || await AdminService.checkAdminValid(admin) == false) NavigationManager.NavigateTo("/admin");
            cards = await AuctionService.FindAllInStateSortedByStartDate(AuctionStatus.concluido);
            StateHasChanged(); // só atualiza o UI, n dá refresh de tudo
		}
	}
}