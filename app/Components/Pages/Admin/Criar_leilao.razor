@page "/admin/criar_leilao"
@layout LoginAdminLayout

@using System.Text.Json
@inject HttpClient Http
@inject NavigationManager NavigationManager
@rendermode InteractiveServer
@using DataLayer.Auction
@using Classes.AuctionCard
@using app.Components.ClassBlocks.AuctionCard
@inject IAuctionRepository db
@inject Microsoft.AspNetCore.Components.NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject IAdminService AdminService
@inject IAuctionRepository AuctionService
@inject IJSRuntime JSRuntime
@using Classes.Admin
@using Classes.Bids
@using Classes.Time

<div id="topoCriarLeilao" class="criar-leilao-page">
    <h3>Criar Leilão</h3>

    <EditForm Model="@leilao" OnValidSubmit="CriarLeilao">
        <DataAnnotationsValidator />

        <div class="form-group">
            <label>Duração do leilão:</label>
            <input type="range" id="timeInput" @bind="timeframeHours" min="2" max="168" step="1" class="form-control"/>
            <span id="timeOutput">@Time.DateInDaysHours(timeframeHours)</span>
            <ValidationMessage For="@(() => timeframeHours)" />
        </div>

        <div class="form-group">
            <label>Nome Artista:</label>
            <InputText @bind-Value="leilao.Nome_artista" class="form-control" />
            <ValidationMessage For="@(() => leilao.Nome_artista)" />
        </div>

        <div class="form-group">
            <label>Nome da obra:</label>
            <InputText @bind-Value="leilao.Prod_nome" class="form-control" />
            <ValidationMessage For="@(() => leilao.Prod_nome)" />
        </div>

        <div class="form-group">
            <label>Tipo da obra:</label>
            <InputSelect @bind-Value="leilao.Prod_tipo" class="form-control">
                <option value="desenho">Desenho</option>
                <option value="escultura">Escultura</option>
                <option value="pintura">Pintura</option>
                <option value="fotografia">Fotografia</option>
                <option value="outro">Outro</option>
            </InputSelect>
            <ValidationMessage For="@(() => leilao.Prod_tipo)" />
        </div>

        <div class="form-group">
            <label>Estado da obra:</label>
            <InputSelect @bind-Value="leilao.Prod_estado" class="form-control">
                <option value="excelente">Excelente</option>
                <option value="bom">Bom</option>
                <option value="mau">Mau</option>
                <option value="pessimo">Péssimo</option>
            </InputSelect>
            <ValidationMessage For="@(() => leilao.Prod_estado)" />
        </div>

        <div class="form-group">
            <label>Técnica utilizada:</label>
            <InputText @bind-Value="leilao.Prod_tecnica" class="form-control" />
            <ValidationMessage For="@(() => leilao.Prod_tecnica)" />
        </div>

        <div class="form-group">
            <label>Descrição:</label>
            <InputTextArea @bind-Value="leilao.Prod_descricao" class="form-control" />
            <ValidationMessage For="@(() => leilao.Prod_descricao)" />
        </div>

        <div class="form-group">
            <label>Preço Base):</label>
            <InputNumber @bind-Value="leilao.Preco_base" class="form-control" />
            <ValidationMessage For="@(() => leilao.Preco_base)" />
        </div>

        <div class="form-group">
            <label>Custo Envio (€):</label>
            <InputNumber @bind-Value="leilao.Custo_envio" class="form-control" />
            <ValidationMessage For="@(() => leilao.Custo_envio)" />
        </div>

        <div class="form-group">
            <label>Comprimento da obra (cm):</label>
            <InputNumber @bind-Value="leilao.Prod_comprimento" class="form-control" />
            <ValidationMessage For="@(() => leilao.Prod_comprimento)" />
        </div>

        <div class="form-group">
            <label>Altura da obra (cm):</label>
            <InputNumber @bind-Value="leilao.Prod_altura" class="form-control" />
            <ValidationMessage For="@(() => leilao.Prod_altura)" />
        </div>

        <div class="form-group">
            <label>Largura da obra (cm):</label>
            <InputNumber @bind-Value="leilao.Prod_largura" class="form-control" />
            <ValidationMessage For="@(() => leilao.Prod_largura)" />
        </div>

        <div class="form-group">
            <label>Peso da obra (g):</label>
            <InputNumber @bind-Value="leilao.Prod_peso" class="form-control" />
            <ValidationMessage For="@(() => leilao.Prod_peso)" />
        </div>
        <div class="form-group">
            <label>Fotos de leilão:</label>
            <InputText @bind-Value="fotoInput" class="form-control" />
            <button type="button" class="btn btn-secondary" @onclick="AdicionarFoto">Adicionar foto</button>
            <ul>
                @foreach (var foto in fotosLeilao) {
                    <li>@foto</li>
                }
            </ul>
        </div>
        <button type="submit" class="btn btn-primary">Submeter Leilão</button>
        @if (submetido) {
            <p class="submit-check-right">&#10003; Leilão submetido com sucesso (redirecionado em 2 segundos..) </p> 
        }
    </EditForm>
</div>

@code {
    private AuctionCard leilao = new AuctionCard();
    private int timeframeHours = 24; // default é 24 horas para um leilao
    private string fotoInput = "";
    private List<string> fotosLeilao = new List<string>();
    private bool submetido = false;
    private int adminId = -1;
    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender) {
            // ver se user existe e ta valido
            Admin admin = await localStorage.GetItemAsync<Admin>("Admin");
            if (admin == null || await AdminService.checkAdminValid(admin) == false) NavigationManager.NavigateTo("/admin");
            adminId = admin.admin_id;
        }
    }

    private void AdicionarFoto()
    {
        if (!string.IsNullOrWhiteSpace(fotoInput))
        {
            fotosLeilao.Add("AuctionPhotos/" + fotoInput);
            fotoInput = ""; // limpar input antes de próximo valor
        }
    }

    private async Task CriarLeilao()
    {
        leilao.DataInicio = DateTime.Now;
        leilao.DataFim = leilao.DataInicio.AddHours(timeframeHours);
        leilao.Leilao_estado = AuctionStatus.em_leilao;
        leilao.IdAdmin = adminId;
        int idLeilao = await AuctionService.createAuction(leilao, fotosLeilao);
        if (idLeilao >= 0) {
            submetido = true;
            StateHasChanged();
            await Task.Delay(2000);
            ResetForm();
        }
    }

    private void ResetForm() {
        leilao = new AuctionCard();
        timeframeHours = 24;
        fotoInput = "";
        fotosLeilao.Clear();
        submetido = false;
                    NavigationManager.NavigateTo("/admin/criar_leilao#topoCriarLeilao", forceLoad: true);
    }
}
