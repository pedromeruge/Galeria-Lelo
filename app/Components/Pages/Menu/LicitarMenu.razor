@inherits ComponentBase
@rendermode InteractiveServer
@using app.Components.Pages.Menu
@using Classes.Session
@using Classes.Bids

@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject Microsoft.AspNetCore.Components.NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject IUserService UserService
@inject IBidRepository BidService

@if (isVisible) {
	<div class="menu-overlay">
		<div class="menu">
			<div class="menu-header">
				<div class="menu-title">
					<div class="menu-header-title">Licitar em leilão</div>
					<button class="close-button" @onclick="CloseMenu">X</button>
				</div>
				<div class="menu-line"></div>
			</div>
            <div class="menu-body">
                <div class="meny-body-text">
                    <div class="body-title">Maior licitação atual:</div>
                    <div class="body-value">@currHighestBid.ToString("F2") €</div>
                </div>
                <form class="inputs" @onsubmit="HandleSubmit">
                    <input class="input-container" type="number" step="0.01" @bind="newBid" placeholder="> @currHighestBid€" required>
                    <button class="input-button" type="submit">LICITAR</button>
                    @if (invalidValue) {
                        <p class="error-msg"> x Valor da licitação tem de ser superior a @currHighestBid €</p>
                    }
                </form>
            </div>
		</div>
	</div>
}

@code {

	[Parameter]
	public bool isVisible { get; set; } = true; // se menu de licitar está ou não visível 

    public bool invalidValue {get; set;} = false; // se valor introduzido é inválido ou não

    [Parameter]
    public int IdLeilao {get; set;}

	[Parameter]
    public float BasePrice {get; set;}
    private float currHighestBid {get; set;}

    private float newBid {get; set;}


	[Parameter]
    public Action? CloseCallback { get; set; }

	public void CloseMenu() {
		isVisible = false;
		CloseCallback?.Invoke();
	}

    protected override async Task OnInitializedAsync() {
        Bid latestBid = await BidService.FindHighestBid(IdLeilao);
        if (latestBid != null)
			currHighestBid = latestBid.Valor;
		else {
			currHighestBid = BasePrice;
		}
    }

	private async Task HandleSubmit() {
		Session session = await localStorage.GetItemAsync<Session>("Session");

        if (newBid <= currHighestBid) {
            invalidValue = true;
        } else {
            Bid bid = new Bid(newBid,DateTime.Now,session.sessao_id,IdLeilao);
            int id = await BidService.createBid(bid);
            bid.IdLicitacao = id;
            Console.WriteLine("Built bid: " + bid.ToString());
            if (id != -1) {
                invalidValue = false;
		        CloseMenu();
            }
            else {
                // transferência falhou ?
            }
        }
	}
}