@inherits ComponentBase
@rendermode InteractiveServer
@using Classes.User
@inject IUserService UserService

@if (showMenuBig) {
		<RegisterMenuBig isVisible=true CloseCallback="CloseMenu" user=@user/>
}
@if (isVisible) {
	<div class="menu-overlay">
		<div class="menu">
			<div class="menu-header">
				<div class="menu-title">
					<div class="menu-header-title">Iniciar sessão ou criar uma conta</div>
					<button class="close-button" @onclick="CloseMenu">X</button>
				</div>
				<div class="menu-line"></div>
				<div class="menu-header-title">Criar conta</div>
			</div>

			<form class="inputs" @onsubmit="HandleSubmit">
				<input class="input-container" type="email" id="email" @bind="user.email" placeholder="Endereço de e-mail" required>

				<input class="input-container" type="username" id="username" @bind="user.username" placeholder="Nome de utilizador" required>

				<input class="input-container" type="password" id="password" @bind="user.pass_hash" placeholder="Palavra-passe" required>

				<button class="input-button" type="submit">Registar</button>
			</form>
		</div>
	</div>
}

@code {
	[Parameter]
	public User user { get; set; } = null;

	[Parameter]
	public bool isVisible { get; set; }

	private bool showMenuBig = false;

	[Parameter]
    public Action? CloseCallback { get; set; }

	public void CloseMenu() {
		isVisible = false;
		showMenuBig = false;
		CloseCallback?.Invoke();
	}

	private async Task HandleSubmit() {
		// se for valido, quer dizer que ja existe, logo nao se pode continuar
		if (await UserService.checkUserValid(user) == false) {
			showMenuBig = true;
			isVisible = false;
		}
	}
}